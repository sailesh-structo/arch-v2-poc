---
version: "3"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    network_mode: "host"
    # ports:
    #   - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    network_mode: "host"
    depends_on:
      - zookeeper
    # ports:
    #   - "29092:29092"
    #   - "9095:9095"
    #   - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: localhost:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT_REMOTE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9094,PLAINTEXT_REMOTE://13.212.193.234:9095
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  postgres:
    image: postgres:14-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}

  connect-1:
    image: confluentinc/cp-kafka-connect:7.5.0
    hostname: connect-1
    container_name: connect-1
    network_mode: "host"
    # ports:
    #   - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: localhost:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: cloud-connect-1
      CONNECT_LISTENERS: http://localhost:8083
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect-cloud-1-group
      CONNECT_CONFIG_STORAGE_TOPIC: _cloud-connect-1-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _cloud-connect-1-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _cloud-connect-1-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_PLUGIN_PATH: /usr/share/java
      CONNECTOR_PLUGINS: /usr/share/java
      CONNECTOR_CLASSPATH: /usr/share/java
    volumes:
      - ./connect/configs/output-topic-sink.json:/etc/kafka-connect/output-topic-sink.json
      - ./connect/jars/kafka-connect-jdbc-10.7.4.jar:/usr/share/java/kafka-connect-jdbc/jars/kafka-connect-jdbc-10.7.4.jar
      - ./connect/jars/postgresql-42.4.3.jar:/usr/share/java/kafka-connect-jdbc/jars/postgresql-42.4.3.jar
    command:
      - bash
      - -c
      - |
        /etc/confluent/docker/run & 
        echo "Waiting for Kafka Connect to start listening on kafka-connect ⏳"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors) -eq 000 ] ; do 
          echo -e $$(date) " Kafka Connect listener HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors) " (waiting for 200)"
          sleep 5 
        done
        nc -vz localhost 8083
        echo -e "\n--\n+> Configuring connectors"
        curl  -X POST \
          'localhost:8083/connectors' \
          --header 'Content-Type: application/json' \
          --data-raw '{
          "name": "output-topic-sink-cloud",
          "config": {
            "connector.class": "io.confluent.connect.jdbc.JdbcSinkConnector",
            "tasks.max": 1,
            "topics": "output",
            "connection.url": "jdbc:postgresql://localhost:5432/my_db",
            "connection.user": "my_user",
            "connection.password": "S3cret",
            "auto.create": true,
            "insert.mode": "upsert",
            "pk.mode": "record_value",
            "pk.fields": "jobId",
            "key.converter": "org.apache.kafka.connect.storage.StringConverter",
            "value.converter": "org.apache.kafka.connect.json.JsonConverter",
            "value.converter.schemas.enable": "true"
          }
        }'
        sleep infinity

  connect-2:
    image: confluentinc/cp-kafka-connect:7.5.0
    hostname: connect-2
    container_name: connect-2
    network_mode: "host"
    # ports:
    #   - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: localhost:9093
      CONNECT_REST_ADVERTISED_HOST_NAME: cloud-connect-2
      CONNECT_LISTENERS: http://localhost:8084
      CONNECT_REST_PORT: 8084
      CONNECT_GROUP_ID: kafka-connect-cloud-2-group
      CONNECT_CONFIG_STORAGE_TOPIC: _cloud-connect-2-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _cloud-connect-2-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _cloud-connect-2-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_PLUGIN_PATH: /usr/share/java
      CONNECTOR_PLUGINS: /usr/share/java
      CONNECTOR_CLASSPATH: /usr/share/java
    volumes:
      - ./connect/configs/output-topic-sink.properties:/etc/kafka-connect/output-topic-sink.json
      - ./connect/jars/kafka-connect-jdbc-10.7.4.jar:/usr/share/java/kafka-connect-jdbc/jars/kafka-connect-jdbc-10.7.4.jar
      - ./connect/jars/postgresql-42.4.3.jar:/usr/share/java/kafka-connect-jdbc/jars/postgresql-42.4.3.jar
    command:
      - bash
      - -c
      - |
        /etc/confluent/docker/run & 
        echo "Waiting for Kafka Connect to start listening on kafka-connect ⏳"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://localhost:8084/connectors) -eq 000 ] ; do 
          echo -e $$(date) " Kafka Connect listener HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://localhost:8084/connectors) " (waiting for 200)"
          sleep 5 
        done
        nc -vz localhost 8084
        echo -e "\n--\n+> Configuring connectors"
        curl  -X POST \
          'localhost:8084/connectors' \
          --header 'Content-Type: application/json' \
          --data-raw '{
          "name": "output-topic-sink-cloud",
          "config": {
            "connector.class": "io.confluent.connect.jdbc.JdbcSinkConnector",
            "tasks.max": 1,
            "topics": "output",
            "connection.url": "jdbc:postgresql://localhost:5432/my_db",
            "connection.user": "my_user",
            "connection.password": "S3cret",
            "auto.create": true,
            "insert.mode": "upsert",
            "pk.mode": "record_value",
            "pk.fields": "jobId",
            "key.converter": "org.apache.kafka.connect.storage.StringConverter",
            "value.converter": "org.apache.kafka.connect.json.JsonConverter",
            "value.converter.schemas.enable": "true"
          }
        }'
        sleep infinity

  control-center:
    build:
      context: ./control-center
    container_name: control-center
    working_dir: /app
    ports:
      - "80:3000"
    environment:
      DATABASE_URL: postgres://my_user:S3cret@postgres:5432/my_db
